unit Exchange;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Imaging.pngimage,
  Vcl.ExtCtrls;

type
  TChange = array[0..12] of Integer;
  TWisselgeld = class(TForm)
    Image1: TImage;
    Image2: TImage;
    EditTotal: TEdit;
    Label1: TLabel;
    CalculateChange: TButton;
    EditPaid: TEdit;
    Label2: TLabel;
    ResetForm: TButton;
    Label3: TLabel;
    EditChange: TEdit;
    procedure CalculateChangeClick(Sender: TObject);
    procedure ResetFormClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private
    { Private declarations }
    procedure ClearForm();
    procedure ValidateInput(Input: Real);
    function CalculateChangeAndRound(Total, Paid: Real): Real;
    procedure ValidateAmount(Total, Paid: Real);
    function CalculateChangePayment(Value: Real): TChange;
    procedure UpdateChangePayments(Changes: TChange);
  public
    { Public declarations }
  end;

var
  Wisselgeld: TWisselgeld;

implementation

{$R *.dfm}

procedure TWisselgeld.ClearForm();
begin
  EditTotal.Clear;
  EditPaid.Clear;
  EditChange.Clear;

  { Test amounts }
  EditTotal.Text := '8.87';
  EditPaid.Text := '10';
end;

procedure TWisselgeld.FormCreate(Sender: TObject);
begin
  ClearForm;
end;

procedure TWisselgeld.CalculateChangeClick(Sender: TObject);
var
  Total, Paid, Change: Real;
  Changes: TChange;
begin

  try
    Total := StrToFloat(EditTotal.Text);
    Paid := StrToFloat(EditPaid.Text);
    ValidateInput(Total);
    ValidateInput(Paid);
    ValidateAmount(Total, Paid);
    Change := CalculateChangeAndRound(Total, Paid);
    EditChange.Text := FloatToStr(Change);
    Changes := CalculateChangePayment(Change);
    UpdateChangePayments(Changes);
  except
    on EConvertError do
      ShowMessage('Vul een decimaal getal met puntnotatie.');
    on EDivByZero do
      ShowMessage('Niet delen door 0.');
    on E : Exception do
      ShowMessage(E.Message);
  end;

end;

procedure TWisselgeld.ResetFormClick(Sender: TObject);
begin
  ClearForm;
end;

procedure TWisselgeld.ValidateInput(Input: Real);
begin
  if Input < 0 then
    raise Exception.Create('Getal moet positief zijn.');

  if Input > 1000 then
    raise Exception.Create('Getal moet onder de 1000 zijn.');
end;

procedure TWisselgeld.ValidateAmount(Total, Paid: Real);
begin
  if Paid < Total then
     raise Exception.Create('Betaalde bedrag moet groter of gelijk zijn aan '
        + 'het totale bedrag.');
end;

function TWisselgeld.CalculateChangeAndRound(Total: Real; Paid: Real): Real;
var Change, Remainder, Rounder: Integer;
begin

  { Aanpassen naar een x div 0.05 }

  Change := Trunc(100 * (Paid - Total));
  Remainder := Change mod 5;
  Rounder := 5 - Remainder;

  if Remainder >= 3 then
  begin
    Change := Change + Rounder;
  end
  else
  begin
    Change := Change - Remainder;
  end;

  Result := Change / 100;
end;

function TWisselgeld.CalculateChangePayment(Value: Real): TChange;
type
  TMoney = array[0..12] of Real;
const
  ChangeValues: TMoney = (500, 200, 100, 50, 20, 10, 5, 2, 1, 0.50, 0.20, 0.10, 0.05);
  Epsilon: Real = 0.000001;
var
  Remainder: Real;
  Change: TChange;
  Index: Integer;
begin
  FillChar(Change, SizeOf(Change), 0);
  Index := 0;
  Remainder := Value;
  while Remainder > Epsilon do
  begin
    if Remainder >= ChangeValues[Index] - Epsilon then
    begin
      Change[Index] := Change[Index] + 1;
      Remainder := Remainder - ChangeValues[Index];
    end
    else
    begin
      Index := Index + 1;
    end;
  end;
  Result := Change;
end;

procedure TWisselgeld.UpdateChangePayments(Changes: TChange);
begin

end;

end.
