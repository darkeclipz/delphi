{ Lars Rotgers, 5500355, 10-12-2019 }
unit Solver;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes,
  Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Menus, Vcl.Grids,
  Vcl.StdCtrls, Vcl.ComCtrls;

type
  TForm1 = class(TForm)
    OutputMemo: TMemo;
    SudokuGrid: TStringGrid;
    LoadPuzzleButton: TButton;
    SolveButton: TButton;
    Animate: TCheckBox;
    StopButton: TButton;
    procedure LoadPuzzleButtonClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure SolveButtonClick(Sender: TObject);
    procedure StopButtonClick(Sender: TObject);
  private
    procedure UpdateGrid;
    procedure Log(Msg: String);
    procedure LoadPuzzle(puzzleString: String);
    procedure Search(Cell: Integer);
    function IsValidRow(RowIndex: Integer): Bool;
    function IsValidColumn(ColIndex: Integer): Bool;
    function IsValidSquare(SquareIndex: Integer): Bool;
    function IsValidPartialSolution(): Bool;
    function SelectFile(): String;
    function ReadFile(path: String): String;
  public
    { Public declarations }
  end;

var
  Form1: TForm1;
  Grid: Array[0..80] of Integer;
  Stop: Bool;

const
  // Alle indices van de cellen voor een vakje.
  Squares: Array[0..8] of Array[0..8] of Integer =
  (
    (0,  1,  2,  9,  10, 11, 18, 19, 20),    // square 1
    (3,  4,  5,  12, 13, 14, 21, 22, 23),    // square 2
    (6,  7,  8,  15, 16, 17, 24, 25, 26),    // square 3
    (27, 28, 29, 36, 37, 38, 45, 46, 47),    // square 4
    (30, 31, 32, 39, 40, 41, 48, 49, 50),    // square 5
    (33, 34, 35, 42, 43, 44, 51, 52, 53),    // square 6
    (54, 55, 56, 63, 64, 65, 72, 73, 74),    // square 7
    (57, 58, 59, 66, 67, 68, 75, 76, 77),    // square 8
    (60, 61, 62, 69, 70, 71, 78, 79, 80)     // square 9
  );

  // Eenvoudige puzzel om mee te testen.
  easy_puzzle: string = '5300700006001950000980000608000600034008'+
                        '03001700020006060000280000419005000080079';

implementation

{$R *.dfm}

procedure TForm1.Log(Msg: String);
begin
  OutputMemo.Lines.Append(Msg);
end;

// Zodra de applicatie opstart, alle UI elementen initialiseren.
procedure TForm1.FormCreate(Sender: TObject);
begin
  SolveButton.Enabled := False;
  StopButton.Enabled := False;
  Stop := False;
  OutputMemo.Lines.Clear;
  Log('First load a puzzle by clicking load.');
end;

// Weergeven van Sudoku in een string grid.
procedure TForm1.UpdateGrid;
var i: Integer;
begin
  for i := 0 to 80 do
  begin
    if Grid[i] <> 0 then
      SudokuGrid.Cells[i mod 9, i div 9] := IntToStr(Grid[i])
    else
      SudokuGrid.Cells[i mod 9, i div 9] := '';
  end;
end;

// Puzzel inladen met het puzzel string formaat.
procedure TForm1.LoadPuzzle(puzzleString: string);
var i: Integer;
begin
  // Controleren of de puzzel wel de juiste lengte heeft.
  if puzzleString.Length <> 81 then
    raise Exception.Create('Invalid puzzle string, it '+
      'should contain 81 characters.');
  // Puzzel inladen in Sudoku grid.
  for i := 0 to 80 do
  begin
    Grid[i] := Ord(puzzleString[i + 1]) - 48;  // 48 is the ASCII code for 0.
    // Controleren of de waarde van de cel wel 1..9 is.
    if (Grid[i] < 0) or (Grid[i] > 9) then
      raise Exception.Create('Grid can only contain values of 0..9, ' +
        ' error at cell ' + IntToStr(i+1) + '.');
  end;
  UpdateGrid;
  SolveButton.Enabled := True;
  Log('Puzzle succesfully loaded.');
end;

// Button waarmee een puzzel kan worden ingeladen.
procedure TForm1.LoadPuzzleButtonClick(Sender: TObject);
var puzzle: String;
var filePath: String;
begin
  try
    filePath := SelectFile();
    puzzle = ReadFile(filePath);
    // Puzzel string aan de gebruiker vragen.
    // puzzle := InputBox('Load', 'Enter a puzzle string:', '');
    if puzzle.Length > 0 then  // controleren of er wel invoer is
      LoadPuzzle(puzzle);
  except on E: Exception do
    Log(E.Message);
  end;
end;

// Met deze functie wordt een rij gecontroleerd op unieke getallen. Voor
// elke cel in de rij wordt er gekeken welk getal al is voorgekomen. Als
// een getal meerdere keren voorkomt dan is de rij ongeldig.
function TForm1.IsValidRow(RowIndex: Integer): Bool;
var
  i: Integer;
  digits: array[0..9] of Bool; // Houdt bij welk getal al is voorgekomen.
begin
  Result := True;
  for i := 0 to 9 do
    digits[i] := False;
  // Voor de rij r de cel indices bij langsgaan, de indices
  // voor de rij zijn: { 9*r, 9*r + 1, ..., 9*r + 8 }.
  for i := 9 * RowIndex to 9 * RowIndex + 8 do
  begin
    // Controleren of het getal al is voorgekomen. Het getal
    // 0 mag meerdere keren voorkomen.
    if not digits[Grid[i]] or (Grid[i] = 0) then
      digits[Grid[i]] := True
    else
      Result := False;
  end;
end;

// Met deze functie wordt een kolom gecontroleerd op unieke getallen. Voor
// elke cel in de kolom wordt er gekeken welk getal al is voorgekomen. Als
// een getal meerdere keren voorkomt dan is de kolom ongeldig.
function TForm1.IsValidColumn(ColIndex: Integer): Bool;
var
  i: Integer;
  digits: array[0..9] of Bool; // Houdt bij welk getal al is voorgekomen.
begin
  Result := True;
  for i := 0 to 9 do
    digits[i] := False;
  // Voor de kolom c de cel indices bij langsgaan, de indices
  // voor de kolom zijn: { c + 0*9, c + 1*9, ..., c + 8*9 }.
  i := ColIndex;
  while i < 81 do
  begin
    // Controleren of het getal al is voorgekomen. Het getal
    // 0 mag meerdere keren voorkomen.
    if not digits[Grid[i]] or (Grid[i] = 0) then
      digits[Grid[i]] := True
    else
      Result := False;
    i := i + 9
  end;
end;

function TForm1.IsValidSquare(SquareIndex: Integer): Bool;
var
  i, index: Integer;
  digits: array[0..9] of Bool; // Houdt bij welk getal al is voorgekomen.
begin
  Result := True;
  for i := 0 to 9 do
    digits[i] := False;
  for i := 0 to 8 do
  begin
    // Voor het vakje s de cel indices bij langsgaan, de indices
    // voor het vakje worden opgezocht in de Squares array.
    index := Squares[SquareIndex][i];
    // Controleren of het getal al is voorgekomen. Het getal
    // 0 mag meerdere keren voorkomen.
    if not digits[Grid[index]] or (Grid[index] = 0) then
      digits[Grid[index]] := True
    else
      Result := False;
  end;
end;

// Hiermee wordt voor een partiele Sudoku puzzel gekeken of
// deze nog correct is. Hiervoor wordt elke rij, kolom en
// vakje gechecked. Indien er ergens een fout ontstaat, dan
// wordt False teruggeven.
function TForm1.IsValidPartialSolution;
var i: Integer;
begin
  Result := True;
  for i := 0 to 8 do
  begin
    Result :=     IsValidRow(i)
              and IsValidColumn(i)
              and IsValidSquare(i);
    if not Result then Exit;  // Stop met controleren als al ongeldig is.
  end;
end;

// Dit is de backtrack zoekprocedure. Hiermee wordt de puzzel opgelost.
// Het algoritme begint in cell 0, en gaat de waarden 1..9 proberen in het
// eerste lege vakje. Als er een partiel geldige oplossing is, dan wordt dit
// getal gekozen en gaat het algoritme verder met het volgende vakje. Als er
// toch geen juiste mogelijkheid onstaat, dan backtracked het algoritme.
procedure TForm1.Search(Cell: Integer);
var
  i: Integer;
begin
  // Animaties weergeven als dit is ingeschakeld.
  if Animate.Checked then
    UpdateGrid;
  // Applicatie messages processen zodat de applicatie niet blijft hangen.
  Application.ProcessMessages;
  // Als we bij de laatste cel zijn, dan is er een oplossing gevonden.
  if Cell >= 81 then
  begin
    Log('Solution found!');
    UpdateGrid;
    Stop := True;
    Exit;
  end;
  // Controleren of de cel leeg is.
  if Grid[Cell] = 0 then
    // De getallen 1..9 proberen...
    for i := 1 to 9 do
    begin
      if Stop then
        Exit;
      Grid[Cell] := i;  // Getal zetten.
      if IsValidPartialSolution then    // Controleren of dit kan...
        Search(Cell + 1);               // Naar de volgende cel.
      if not Stop then
        Grid[cell] := 0;                // Ingevulde waarde weghalen.
    end
  else Search(Cell + 1); // Cel heeft al een waarde, naar de volgende cel.
end;

// Button waarmee de het algoritme begint op te lossen.
procedure TForm1.SolveButtonClick(Sender: TObject);
begin
  OutputMemo.Lines.Clear; // Uitvoer leegmaken.
  // Controleren of de puzzel aan het begin in een geldige staat is.
  if not IsValidPartialSolution then
  begin
    Log('Loaded puzzle is not solvable.');
    Exit;
  end;
  // UI elementen deactiveren
  SolveButton.Enabled := False;
  Stop := False;
  StopButton.Enabled := True;
  LoadPuzzleButton.Enabled := False;
  Log('Solving . . .   (press stop to abort)');
  // Beginnen met zoeken
  Search(0);
  // (Eventuele) oplossing weergeven.
  UpdateGrid;
  StopButton.Enabled := False;
  LoadPuzzleButton.Enabled := True;
  // Geen oplossing gevonden
  if not Stop then
    Log('No solution found for this Sudoku! (Or the operation has been aborted.)');
end;

// Button om het zoeken mee te stoppen.
procedure TForm1.StopButtonClick(Sender: TObject);
begin
  // Stop met zoeken en UI button zodanig activeren
  // dat een nieuwe puzzel moet worden ingeladen.
  Stop := True;
  StopButton.Enabled := False;
  LoadPuzzleButton.Enabled := True;
  Log('Stopping search. The puzzle is now invalid!');
  Log('Reload the puzzle to continue.');
end;

// Bestand selecteren en bestandpad teruggeven.
function TForm1.SelectFile(): String;
var
  openDialog: TOpenDialog;
begin
  Result := '';
  openDialog := TOpenDialog.Create(Self);
  openDialog.InitialDir := GetCurrentDir;
  openDialog.Filter := 'Sudoku file|*.sudoku|Text file|*.txt';
  openDialog.FilterIndex := 2;
  if openDialog.Execute then
    Result := openDialog.FileName;
  openDialog.Free;
end;

// De inhoud van een bestand uitlezen.
function TForm1.ReadFile(path: string): String;
var
  sudokuFile: TextFile;
begin
  AssignFile(sudokuFile, path);
  Reset(sudokuFile);
  Result := ReadLn(sudokuFile);
  CloseFile(sudokuFile);
end;


end.
