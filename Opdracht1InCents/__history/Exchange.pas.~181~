unit Exchange;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Imaging.pngimage,
  Vcl.ExtCtrls;

type
  TSpareChange = array[0..12] of Integer;
  TWisselgeld = class(TForm)
    Image1: TImage;
    Image2: TImage;
    EditTotal: TEdit;
    Label1: TLabel;
    CalculateChange: TButton;
    EditPaid: TEdit;
    Label2: TLabel;
    ResetForm: TButton;
    Label3: TLabel;
    EditChange: TEdit;
    EditChange0: TEdit;
    EditChange1: TEdit;
    EditChange2: TEdit;
    EditChange3: TEdit;
    EditChange4: TEdit;
    EditChange5: TEdit;
    EditChange6: TEdit;
    EditChange12: TEdit;
    EditChange11: TEdit;
    EditChange10: TEdit;
    EditChange9: TEdit;
    EditChange8: TEdit;
    EditChange7: TEdit;
    procedure CalculateChangeClick(Sender: TObject);
    procedure ResetFormClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private
    { Private declarations }
    procedure ClearForm();
    procedure ValidateDecimal(Value: Real);
    function CalculateChangeAndRound(TotalInCents, PaidInEuroCents: Integer): Integer;
    procedure ValidateAmountPaid(TotalInEuros, PaidInEuros: Real);
    function CalculateSpareChange(SpareChangeInCents: Integer): TSpareChange;
    procedure UpdateSpareChange(Changes: TSpareChange);
  public
    { Public declarations }
  end;

var
  Wisselgeld: TWisselgeld;

implementation

{$R *.dfm}

procedure TWisselgeld.ClearForm();
begin
  EditTotal.Clear;
  EditPaid.Clear;
  EditChange.Clear;
  EditChange0.Clear;
  EditChange1.Clear;
  EditChange2.Clear;
  EditChange3.Clear;
  EditChange4.Clear;
  EditChange5.Clear;
  EditChange6.Clear;
  EditChange7.Clear;
  EditChange8.Clear;
  EditChange9.Clear;
  EditChange10.Clear;
  EditChange11.Clear;
  EditChange12.Clear;

  { Test amounts }
  EditTotal.Text := '8.87';
  EditPaid.Text := '10';
end;

procedure TWisselgeld.FormCreate(Sender: TObject);
begin
  ClearForm;
end;

procedure TWisselgeld.CalculateChangeClick(Sender: TObject);
var
  TotalInEuros, PaidInEuros, ChangeInEuros: Real;
  TotalInEuroCents, PaidInEuroCents, ChangeInEuroCents: Integer;
  SpareChanges: TSpareChange;
begin
  try
    TotalInEuros := StrToFloat(EditTotal.Text);
    PaidInEuros := StrToFloat(EditPaid.Text);
    ValidateDecimal(TotalInEuros);
    ValidateDecimal(PaidInEuros);
    ValidateAmountPaid(TotalInEuros, PaidInEuros);
    TotalInEuroCents := Trunc(100 * TotalInEuros);
    PaidInEuroCents := Trunc(100 * PaidInEuros);
    ChangeInEuroCents := CalculateChangeAndRound(TotalInEuroCents, PaidInEuroCents);
    SpareChanges := CalculateSpareChange(ChangeInEuroCents);
    EditChange.Text := FloatToStr(ChangeInEuroCents / 100);
    UpdateSpareChange(SpareChanges);
  except
    on EConvertError do
      ShowMessage('Vul een decimaal getal in met puntnotatie.');
    on E : Exception do
      ShowMessage(E.Message);
  end;
end;

procedure TWisselgeld.ResetFormClick(Sender: TObject);
begin
  ClearForm;
end;

procedure TWisselgeld.ValidateDecimal(Value: Real);
begin
  if Value < 0 then
    raise Exception.Create('Getal moet positief zijn.');
  if Value > 1000 then
    raise Exception.Create('Getal moet onder de 1000 zijn.');
end;

procedure TWisselgeld.ValidateAmountPaid(TotalInEuros, PaidInEuros: Real);
begin
  if PaidInEuros < TotalInEuros then
     raise Exception.Create('Betaalde bedrag moet groter of gelijk zijn aan '
        + 'het totale bedrag.');
end;

function TWisselgeld.CalculateChangeAndRound(TotalInCents: Integer; PaidInEuroCents: Integer): Integer;
var Change, Remainder, RemainderToRoundUp: Integer;
begin
  Change := PaidInEuroCents - TotalInCents;
  Remainder := Change mod 5;
  RemainderToRoundUp := 5 - Remainder;
  if Remainder >= 3 then
  begin
    Change := Change + RemainderToRoundUp;
  end
  else
  begin
    Change := Change - Remainder;
  end;
  Result := Change;
end;

function TWisselgeld.CalculateSpareChange(SpareChangeInCents: Integer): TSpareChange;
const
  SpareChangeTypes: TSpareChange = (50000, 20000, 10000, 5000, 2000, 1000, 500,
                                    200, 100, 50, 20, 10, 5);
var
  RemainingSpareChangeInCents: Integer;
  SpareChanges: TSpareChange;
  Index: Integer;
begin
  FillChar(SpareChanges, SizeOf(SpareChanges), 0);
  Index := 0;
  RemainingSpareChangeInCents := SpareChangeInCents;
  while RemainingSpareChangeInCents >= 0 do
  begin
    if RemainingSpareChangeInCents >= SpareChangeTypes[Index] then
    begin
      SpareChanges[Index] := SpareChanges[Index] + 1;
      RemainingSpareChangeInCents := RemainingSpareChangeInCents - SpareChangeTypes[Index];
    end
    else
    begin
      Index := Index + 1;
    end;
  end;
  Result := SpareChanges;
end;

procedure TWisselgeld.UpdateSpareChange(Changes: TSpareChange);
begin
  EditChange0.Text := IntToStr(Changes[0]);
  EditChange1.Text := IntToStr(Changes[1]);
  EditChange2.Text := IntToStr(Changes[2]);
  EditChange3.Text := IntToStr(Changes[3]);
  EditChange4.Text := IntToStr(Changes[4]);
  EditChange5.Text := IntToStr(Changes[5]);
  EditChange6.Text := IntToStr(Changes[6]);
  EditChange7.Text := IntToStr(Changes[7]);
  EditChange8.Text := IntToStr(Changes[8]);
  EditChange9.Text := IntToStr(Changes[9]);
  EditChange10.Text := IntToStr(Changes[10]);
  EditChange11.Text := IntToStr(Changes[11]);
  EditChange12.Text := IntToStr(Changes[12]);
end;

end.
