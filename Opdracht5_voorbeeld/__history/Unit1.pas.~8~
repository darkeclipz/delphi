unit Unit1;
//Genereert de 65 verschillende oplossingen van de 8*8 Pentomino puzzel
//door middel van backtracking
interface
uses
 Windows, Messages, SysUtils, Classes,
 Graphics, Controls, Forms, Dialogs,Grids, StdCtrls, ComCtrls;
type
 TForm1 = class(TForm)
    NextButton: TButton;
    StopButton: TButton;
    ProgressBar1: TProgressBar;
    DrawGrid1: TDrawGrid;
    Label1: TLabel;
    CheckBox1: TCheckBox;
 procedure DrawGrid1DrawCell(Sender: TObject; Col, Row: Integer;
 Rect: TRect; State: TGridDrawState);
 procedure NextButtonClick(Sender: TObject);
 procedure StopButtonClick(Sender: TObject);
 procedure FormActivate(Sender: TObject);
 private
 { Private declarations }
 public
 { Public declarations }
 end;

var
 Form1: TForm1;
implementation
{$R *.DFM}
const
  AantalStukken=12;
  Standen: array[1..12] of integer=(1,4,2,4,8,4,8,4,4,8,8,1);
  {De stukken zijn: X,U,I,T,N,V,F,Z,W,Y,P,L
  De letters geven bij benadering de vorm van de stukken weer.
  Het L-stuk heeft 8 verschillende standen. We gebruiken er maar 1
  om gedraaide en gespiegelde oplossingen uit te sluiten.
  De nummers van de vier overige vakjes die bezet worden als je
  een stuk in een bepaalde stand vanaf denkbeeldig vakje 0 plaatst,
  worden in het constante array Bezetting opgesomd.}
  Bezetting: array[1..224] of integer =(
    8,9,10,18, //X
    1,9,18,19, 2,9,10,11, 1,10,18,19, 1,2,9,11, //U
    9,18,27,36, 1,2,3,4, //I
    1,2,10,19, 7,8,9,18, 9,17,18,19, 9,10,11,18, //T
    9,10,19,28, 1,7,8,9, 9,18,19,28, 1,2,8,9, //N
    8,9,17,26, 1,2,11,12, 9,17,18,26, 1,10,11,12,
    1,2,9,18, 1,2,11,20, 9,16,17,18, 9,18,19,20, //V
    1,8,9,18, 8,9,10,19, 9,10,17,18, 9,10,11,19, //F
    1,10,11,19, 7,8,9,17, 8,9,18,19, 8,9,10,17,
    1,10,19,20, 7,8,9,16, 1,9,17,18, 9,10,11,20, //Z
    9,10,19,20, 1,8,9,17, 1,10,11,20, 8,9,16,17, //W
    8,9,18,27, 7,8,9,10, 9,18,19,27, 1,2,3,10, //Y
    9,10,18,27, 1,2,3,11,9,17,18,27, 8,9,10,11,
    1,9,10,18, 1,2,10,11, 8,9,17,18, 1,9,10,11, //P
    1,9,10,19, 1,8,9,10, 9,10,18,19, 1,2,9,10,
    9,18,27,28); //L
var
  Opl: Integer; //Telt aantal oplossingen
  Volgende: Boolean; //Om klik op NextButton door te geven
  Vrij: array[1..12] of Boolean; //Geeft aan of een stuk nog vrij is
  Kleur: array[0..13] of TColor; //Kleur 13 voor middelste 4 vakjes
  Vakje: array[1..82] of Integer; //De vakjes van het bord en de rand
  Viertal: array[1..12,1..8,1..4] of Integer;//De viertallen per stuk per stand

procedure TForm1.DrawGrid1DrawCell (Sender: TObject; Col, Row: Integer;
  Rect: TRect; State: TGridDrawState);
  //Wordt aangeroepen bij tekenen van het scherm.
  //Maar wel zelf koppelen aan het event OnDrawCell
var k: Integer;
begin
  k:=Vakje[Row*9+Col+1]; //Kleur de vakjes met kleuren stuk
  if k>=0 then DrawGrid1.Canvas.Brush.Color:=Kleur[k];
  DrawGrid1.Canvas.FillRect(Rect);
end;

function Past (Stuk, Stand, Vanaf: Integer): Boolean;
//Controleer of stuk in deze stand vanaf vakje Vanaf past
var k:Integer;
begin
  Result:=True;
  k:=0;
  while Result and (k<4) do
  begin
    k:=k+1;
    Result := (Vakje [Vanaf + Viertal [Stuk, Stand, k]]=0);
  end;
end;

procedure Plaats (Stuk, Stand, Vanaf: Integer);
//Plaats het stuk in deze stand vanaf vakje Vanaf
var k: Integer;
begin
  Vakje[Vanaf] := Stuk;
  for k:=1 to 4 do
    Vakje [ Vanaf + Viertal [ Stuk, Stand, k]] := Stuk;
  Vrij[Stuk]:=False;
end;

procedure NeemWeg (Stuk, Stand, Vanaf: Integer);
//Neem het stuk weg
var k: Integer;
begin
  Vakje[Vanaf]:=0;
  for k:=1 to 4 do
    Vakje [ Vanaf + Viertal [ Stuk, Stand, k]] := 0;
  Vrij[Stuk]:=True;
end;

procedure Oplossing;
begin
  Beep;
  Opl:=Opl+1;
  Form1.DrawGrid1.Refresh; //Zorgt dat DrawCell wordt uitgevoerd
  Form1.Label1.Caption:='Oplossing nr.: '+IntToStr(Opl);
  Volgende:=False;
  Form1.NextButton.Enabled:=True;
  repeat //Wacht op doorgaan of stoppen
    Application.ProcessMessages;
  until Volgende or Application.Terminated;
end;

procedure ProbeerZet (Vanaf: Integer);
//Backtracking procedure voor het oplossen van de 8*8 Pentomino puzzel
var
 Stuk,Stand,VV: Integer;
begin
  Application.ProcessMessages;
  if Application.Terminated then Exit; //Verlaat de procedure
  for Stuk:=1 to AantalStukken do
  begin
    if Vrij[Stuk] then
      for Stand:=1 to Standen[Stuk] do
        if Past(Stuk,Stand,Vanaf) then
        begin
          Plaats(Stuk,Stand,Vanaf);
          VV:=Vanaf; //Zoek volgende vrije vakje
          while Vakje[VV]<>0 do VV:=VV+1;
          if Opl>0 then
          begin
            Application.ProcessMessages; //verwerk berichten
            if Form1.CheckBox1.Checked then //toon voortgang
              if abs(Form1.ProgressBar1.Position-VV)>=30 then
                Form1.ProgressBar1.Position:=VV;
          end;
          if VV<>82 then //Nog niet alle vakjes gevuld
            ProbeerZet(VV)
          else
            Oplossing;
          NeemWeg(Stuk,Stand,Vanaf);
        end;
  end;

end;

procedure Init; {initialisatie van de variabelen}
var
 h,i,j,k : Integer;
begin
h:=0;
for i:=1 to 12 do //Lees de 4 bezette vakjes in
  for j:=1 to Standen[i] do //per stuk per stand
    for k:=1 to 4 do
    begin
      h:=h+1;
      Viertal[i,j,k]:=Bezetting[h];
    end;
  {Zo zijn de vakjes genummerd:
   1 2 3 4 5 6 7 8 9
   10 11 12 13 14 15 16 17 18
   19 20 21 22 23 24 25 26 27
   ...
   64 ... 72
   73 ... 81 82
  De vakjes 9,18,27,..,81 zijn bezet (-1); zij vormen samen met de
  vakjes 72,73,...,80 de rand rond het 8*8 vierkant. Vakje 82 is leeg.}
  for i:=1 to 9 do Vakje[9*i]:=-1; //Bezet de rand rondom het 8*8 vierkant
  for i:=73 to 80 do Vakje[i]:=-1;
  Vakje[82]:=0;
  Vakje[31]:=13; Vakje[32]:=13; //Bezet de 4 middelste vakjes
  Vakje[40]:=13; Vakje[41]:=13; //met fictief stuk 13.
  for i:=1 to 12 do Vrij[i]:=True;
  Kleur[0]:=clWhite; //Voor eventuele lege vakjes
  Kleur[1]:=clRed;      Kleur[2]:=clBlue;     Kleur[3]:=clYellow;
  Kleur[4]:=clGreen;    Kleur[5]:=clNavy;     Kleur[6]:=clLime;
  Kleur[7]:=clFuchsia;  Kleur[8]:=clBlack;    Kleur[9]:=clAqua;
  Kleur[10]:=clGray;    Kleur[11]:=clPurple;  Kleur[12]:=clTeal;
  Kleur[13]:=clSilver; //Kleur van vier middelste vakjes
  Opl:=0; //Teller voor aantal oplossingen.
end;

procedure TForm1.FormActivate (Sender: TObject);
begin //Zelf koppelen aan het event OnActivate
  Init;
  Volgende:=False; //Is op knop Volgende geklikt?
  NextButton.Enabled:=False;
  ProbeerZet(1); //Dit is de aanroep van de backtrack procedure
end;

procedure TForm1.NextButtonClick (Sender: TObject);
begin
  Volgende:=True; //Ga door met zoeken naar volgende oplossing
  NextButton.Enabled:=False;
end;

procedure TForm1.StopButtonClick (Sender: TObject);
begin
  Application.Terminate;
end;
end.
